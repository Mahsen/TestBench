//*********************************************************** Explanation ***************************************************************//
/*
Last Update : 13950305
*/
//************************************************************* Warning *****************************************************************//
/*
none
*/
//************************************************************* Wizard ******************************************************************//
/*
none
*/
//************************************************************ defineds ******************************************************************//
/*
none
*/
//************************************************************ includes ******************************************************************//
#include "gpio.hpp"
//************************************************************ variables *****************************************************************//
#if(GPIO_ENABLE)
static bool  GPIO_Inited = false;
const GPIO_TypeDef*  GPIO_PORTSEL[] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
const U32  GPIO_PORTCLOCK[] = {RCC_AHBPeriph_GPIOA, RCC_AHBPeriph_GPIOB, RCC_AHBPeriph_GPIOC, RCC_AHBPeriph_GPIOD, RCC_AHBPeriph_GPIOE, RCC_AHBPeriph_GPIOF, RCC_AHBPeriph_GPIOG, RCC_AHBPeriph_GPIOH};
struct_GPIO GPIO;
#if(GPIO_OUTPUT_ENABLE)
	static U64 GPIO_output_Task_STAK[GPIO_OUTPUT_TASK_STAK_SIZE/8];
#endif
#if(GPIO_INPUT_ENABLE)
	static U64 GPIO_input_Task_STAK[GPIO_INPUT_TASK_STAK_SIZE/8];
#endif
#endif
//************************************************************* opjects ******************************************************************//
/*
none
*/
//************************************************************ functions *****************************************************************//
#if(GPIO_ENABLE)
/**
 * @brief 		initialize GPIO
*/
void __init_GPIO(void)
{
			if(!GPIO_Inited)
			{
						__uninit_GPIO();
				
#if(GPIO_OUTPUT_ENABLE)
						/// Add "GPIO_OUTPUT" task
						TaskManager_Add("GPIO_OUTPUT", GPIO_Output_Task, GPIO_OUTPUT_PRIORITY, &GPIO_output_Task_STAK, sizeof(GPIO_output_Task_STAK));
#endif
#if(GPIO_INPUT_ENABLE)
						/// Add "GPIO_INPUT" task
						TaskManager_Add("GPIO_INPUT", GPIO_Input_Task, GPIO_INPUT_PRIORITY, &GPIO_input_Task_STAK, sizeof(GPIO_input_Task_STAK));	
#endif
				
						SLEEP_AddReInitPreperal(&__uninit_GPIO, &__init_GPIO);
				
						GPIO_Inited = true;
			}
			else
			{
						GPIO_InitTypeDef  GPIO_InitStructure;
						for(U8 gpio_i=RESET; gpio_i<GPIO.GetNumOfOutput(); gpio_i++)
						{
									GPIO_InitStructure.GPIO_Pin = (1 << GPIO.Output[gpio_i].GetPin());
									GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
									GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
									GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
									GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;

									RCC_AHBPeriphClockCmd(GPIO_PORTCLOCK[GPIO.Output[gpio_i].GetPort()], ENABLE);		
									GPIO_Init((GPIO_TypeDef*)GPIO_PORTSEL[GPIO.Output[gpio_i].GetPort()], &GPIO_InitStructure);
						}
						for(U8 gpio_i=RESET; gpio_i<GPIO.GetNumOfInput(); gpio_i++)
						{
									GPIO_InitStructure.GPIO_Pin = (1 << GPIO.Input[gpio_i].GetPin());
									GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
									GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
									GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
									GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
							
									RCC_AHBPeriphClockCmd(GPIO_PORTCLOCK[GPIO.Input[gpio_i].GetPort()], ENABLE);		
									GPIO_Init((GPIO_TypeDef*)GPIO_PORTSEL[GPIO.Input[gpio_i].GetPort()], &GPIO_InitStructure);
						}
			}
}
#endif
//_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
#if(GPIO_ENABLE)
/**
 * @brief 		uninitialize GPIO
*/
void __uninit_GPIO(void)
{
//			/// غير فعال نمودن تمامي پورت ها
//			//{
//			GPIO_InitTypeDef  GPIO_InitStructure;	
//			/// PORTA
//			//{
//			GPIO_InitStructure.GPIO_Pin = /*GPIO_Pin_0 |*/ GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 \
//																	| GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 \
//																	| GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 \
//																	| GPIO_Pin_15;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);		
//			GPIO_Init(GPIOA, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOA, GPIO_InitStructure.GPIO_Pin);
//			//}
//			/// PORTB
//			//{
//			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 \
//																	| GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 \
//																	| GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 \
//																	| GPIO_Pin_15;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);		
//			GPIO_Init(GPIOB, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOB, GPIO_InitStructure.GPIO_Pin);
//			//}
//			/// PORTC
//			//{
//			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 \
//																	| GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 \
//																	/*| GPIO_Pin_10*/ /*| GPIO_Pin_11*/ | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 \
//																	| GPIO_Pin_15;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);		
//			GPIO_Init(GPIOC, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOC, GPIO_InitStructure.GPIO_Pin);
//			//}
//			/// PORTD
//			//{
//			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 \
//																	/*| GPIO_Pin_5 |*/ /*GPIO_Pin_6*/ | GPIO_Pin_7 | /*GPIO_Pin_8 |*/ /*GPIO_Pin_9 \
//																	|*/ GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 \
//																	| GPIO_Pin_15;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);		
//			GPIO_Init(GPIOD, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOD, GPIO_InitStructure.GPIO_Pin);
//			//}
//			/// PORTE
//			//{
//			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | /*GPIO_Pin_3 |*/ GPIO_Pin_4 \
//																	| GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 \
//																	| GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 \
//																	| GPIO_Pin_15;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);		
//			GPIO_Init(GPIOE, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOE, GPIO_InitStructure.GPIO_Pin);
//			//}
//			/// PORTF
//			//{
//			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 \
//																	| GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 \
//																	| GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 /*| GPIO_Pin_14*/ \
//																	| GPIO_Pin_15;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);		
//			GPIO_Init(GPIOF, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOF, GPIO_InitStructure.GPIO_Pin);
//			//}
//			/// PORTG
//			//{			
//			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 \
//																	| GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 \
//																	| GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 \
//																	| GPIO_Pin_15;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOG, ENABLE);		
//			GPIO_Init(GPIOG, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOG, GPIO_InitStructure.GPIO_Pin);
//			//}
//			/// PORTH
//			//{
//			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
//			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
//			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
//			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
//			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//			RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOH, ENABLE);		
//			GPIO_Init(GPIOH, &GPIO_InitStructure);
//			GPIO_ResetBits(GPIOH, GPIO_InitStructure.GPIO_Pin);
//			//}
//			//}
}
#endif
//_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
#if(GPIO_OUTPUT_ENABLE)
/**
 * @brief 		Add pin for output
 * @param[in]	Port number port
 * @param[in]	Pin number pin
 * @param[in]	Addr_Value pointer value
 * @param[in]	Default default value
 * @return 		number of added for output
*/
S8 GPIO_Output_AddPin(U8 Port, U8 Pin,bool *Addr_Value, bool Default)
{
			GPIO_InitTypeDef  GPIO_InitStructure;
	
			/// Check max gpio output
			if(GPIO.GetNumOfOutput()<GPIO_OUTPUT_MAX)
			{
				
						// Configure output mode
						GPIO_InitStructure.GPIO_Pin = (1 << Pin);
						GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
						GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
						GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
						GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
				
						/// GPIO Peripheral clock enable
						GPIO.Output[GPIO.GetNumOfOutput()].SetPort(Port);
						RCC_AHBPeriphClockCmd(GPIO_PORTCLOCK[Port], ENABLE);		
						GPIO_Init((GPIO_TypeDef*)GPIO_PORTSEL[Port], &GPIO_InitStructure);

						/// Add to struct gpio output						
						GPIO.Output[GPIO.GetNumOfOutput()].SetPin(Pin);
						GPIO.Output[GPIO.GetNumOfOutput()].SetAddrValue(Addr_Value);
						GPIO.Output[GPIO.GetNumOfOutput()].SetFeedValue(*Addr_Value);
						
						*Addr_Value = Default;
						
						/// Increase number of gpio output used
						GPIO.IncreaseNumOfOutput();
			}
			else
			{
						//Debug("GPIO: Out of range gpio output pin => S8 GPIO_Output_AddPin(...)");
						return -1;
			}
			
			return GPIO.GetNumOfOutput();
}
#endif
//_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
#if(GPIO_INPUT_ENABLE)
/**
 * @brief 		Add pin for input
 * @param[in]	Port number port
 * @param[in]	Pin number pin
 * @param[in]	Addr_Fun pointer function call on change edge
 * @param[in]	Addr_Value pointer value
 * @param[in]	Edge how time call function
 * @param[in]	ByInt if run to interrupt value
 * @param[in]	Default default value
 * @return 		number of added for input
*/
S8 GPIO_Input_AddPin(U8 Port, U8 Pin,void (*Addr_Fun)(void), bool *Addr_Value, U8 Edge, U8 Pulling, bool ByInt, bool Default)
{
			GPIO_InitTypeDef  GPIO_InitStructure;
		
			/// Check max gpio input
			if(GPIO.GetNumOfInput()<GPIO_INPUT_MAX)
			{
						
						/// Configure input mode
						GPIO_InitStructure.GPIO_Pin = (1 << Pin);
						GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
						GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
						GPIO_InitStructure.GPIO_PuPd = (Pulling==PIN_PULLING_UP)?GPIO_PuPd_UP:(Pulling==PIN_PULLING_DOWN)?GPIO_PuPd_DOWN:GPIO_PuPd_NOPULL;
						GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
				
						/// GPIO Peripheral clock enable
						GPIO.Input[GPIO.GetNumOfInput()].SetPort(Port);
						RCC_AHBPeriphClockCmd(GPIO_PORTCLOCK[Port], ENABLE);		
						GPIO_Init((GPIO_TypeDef*)GPIO_PORTSEL[Port], &GPIO_InitStructure);

						/// Add to struct gpio input
						GPIO.Input[GPIO.GetNumOfInput()].SetPin(Pin);
						GPIO.Input[GPIO.GetNumOfInput()].SetAddrFun(Addr_Fun);
						GPIO.Input[GPIO.GetNumOfInput()].SetAddrValue(Addr_Value);
						GPIO.Input[GPIO.GetNumOfInput()].SetFeedValue(Default);
						GPIO.Input[GPIO.GetNumOfInput()].SetEdge(Edge);
						
						*Addr_Value = Default;
						
						/// Increase number of gpio input used
						GPIO.IncreaseNumOfInput();
						
			}
			else
			{
						//Debug("GPIO: Out of range gpio input pin => S8 GPIO_Input_AddPin(...)");
						return -1;
			}
					
			return GPIO.GetNumOfInput();
}
#endif
//*************************************************************** tasks *******************************************************************//
#if(GPIO_OUTPUT_ENABLE)
/**
 * @brief 	 task manage output pin
*/
__task void GPIO_Output_Task(void)
{

			/// Delays in beginning the task
			TaskManager_Delay(5 Sec);
	
			U8 gpio_i;
			
			/// Task {
			while(true)
			{

						/// Refresh pin by changing the value gpio output
						for(gpio_i=RESET; gpio_i<GPIO.GetNumOfOutput(); gpio_i++)
						{
									if((*GPIO.Output[gpio_i].GetAddrValue()) != GPIO.Output[gpio_i].GetFeedValue())
									{
												if(*GPIO.Output[gpio_i].GetAddrValue())
												{
															GPIO_SetBits((GPIO_TypeDef*)GPIO_PORTSEL[GPIO.Output[gpio_i].GetPort()], (1 << GPIO.Output[gpio_i].GetPin()));
												}
												else
												{
															GPIO_ResetBits((GPIO_TypeDef*)GPIO_PORTSEL[GPIO.Output[gpio_i].GetPort()], (1 << GPIO.Output[gpio_i].GetPin()));
												}
												GPIO.Output[gpio_i].SetFeedValue(*GPIO.Output[gpio_i].GetAddrValue());
									}
						}

						/// Delay one Tick
						TaskManager_Delay(1 MSec);	
			}
			/// }
}
#endif
//_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
#if(GPIO_INPUT_ENABLE)
/**
 * @brief 	 task manage input pin
*/
__task void GPIO_Input_Task(void)  //find minimum Pulse Width 500 us
{

			/// Delays in beginning the task
			TaskManager_Delay(5 Sec);
	
			U8 gpio_i;
			
			/// Task {
			while(true)
			{
				    /// Refresh value gpio input by changing the pin [toggle,rising,falling]
				    /// Call function in add
						for(gpio_i=RESET; gpio_i<GPIO.GetNumOfInput(); gpio_i++)
						{
												*GPIO.Input[gpio_i].GetAddrValue() = GPIO_ReadInputDataBit((GPIO_TypeDef*)GPIO_PORTSEL[GPIO.Input[gpio_i].GetPort()], (1 << GPIO.Input[gpio_i].GetPin()));
							
												if(*GPIO.Input[gpio_i].GetAddrValue() != GPIO.Input[gpio_i].GetFeedValue())
												{
															if(GPIO.Input[gpio_i].GetEdge()==PIN_EDGE_TOGGEL)
															{
																		if(GPIO.Input[gpio_i].GetAddrFun())
																		{
																					GPIO.Input[gpio_i].RunAddrFun();
																		}
															}
															else if((GPIO.Input[gpio_i].GetEdge()==PIN_EDGE_UP) && (GPIO.Input[gpio_i].GetFeedValue()==false))
															{
																		if(GPIO.Input[gpio_i].GetAddrFun())
																		{
																					GPIO.Input[gpio_i].RunAddrFun();
																		}
															}
															else if((GPIO.Input[gpio_i].GetEdge()==PIN_EDGE_DOWN) && (GPIO.Input[gpio_i].GetFeedValue()==true))
															{
																		if(GPIO.Input[gpio_i].GetAddrFun())
																		{
																					GPIO.Input[gpio_i].RunAddrFun();
																		}
															}
															GPIO.Input[gpio_i].SetFeedValue(*GPIO.Input[gpio_i].GetAddrValue());
												}
						}
				
						/// Delay one Mili Second
						TaskManager_Delay(1 MSec);
			}
			/// }
}
#endif
//************************************************************** vectors ******************************************************************//
/*
none
*/
//****************************************************************************************************************************************//










